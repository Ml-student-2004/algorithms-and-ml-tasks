
setsize = 100
myset = [[]for _ in range(setsize)]  # создание двумерного списка
answer = []
def add(x):
    if( x not in myset[x%100]):
        myset[x%100].append(x)
def check(x):
    if( x in myset[x%100] and x not in answer):
        answer.append(x)
    

new_bag = list(map(int, input().split()))
old_bag = list(map(int, input().split()))
for i in range(len(new_bag)):
    add(new_bag[i])
    
for i in range(len(old_bag)):
    check(old_bag[i])
answer.sort()

  print(' '.join(map(str, answer))) ## вывод списка в котором элементы int  в одну строку 


### СЕТЫ НЕВЕРОЯТНО УСКОРИЛИ ПРОГРАММУ 
"""В текущей реализации вы используете списки (list) для хранения элементов в myset.
 Однако операции поиска (in) в списках имеют сложность O(n), что замедляет выполнение.
  Вместо этого можно использовать множества (set), 
  которые обеспечивают среднюю сложность O(1) для операций добавления и проверки наличия элемента
"""
setsize = 100
myset = [set() for _ in range(setsize)]  # Используем множества вместо списков
answer = set()  # Используем множество для хранения ответа

def add(x):
    myset[x % 100].add(x)  # Добавляем элемент в множество

def check(x):
    if x in myset[x % 100]:  # Проверяем наличие элемента
        answer.add(x)  # Добавляем в ответ, если элемент найден

new_bag = list(map(int, input().split()))
old_bag = list(map(int, input().split()))

for x in new_bag:
    add(x)

for x in old_bag:
    check(x)

# Преобразуем множество answer в отсортированный список
sorted_answer = sorted(answer)
print(','.join(map(str, sorted_answer)))


""" Важно - достичь  баланса между размером хеэ функции и скоростью"""
""" Если ячеек в хэш таблице маловато то мы всегда можем ее увеличить вдвое"""
  # Амортизированная сложность - среднее время выполнения операций
   

Входные данные для вашей программы нужно читать из стандартного потока ввода (stdin), 
а не из файла или через input(). Это часто используется в задачах, где входные данные
 подаются через файл или через перенаправление ввода.

Что такое sys.stdin?
sys.stdin — это стандартный поток ввода в Python. Он используется для чтения данных, которые поступают в программу извне. Например:
Если вы запускаете программу в терминале и вводите данные вручную, sys.stdin будет читать эти данные.
Если вы перенаправляете файл в программу (например, python script.py < input.txt), sys.stdin будет читать данные из файла.

НАХОЖДЕНИЕ КОЛИЧЕСТВО СЛОВ В ФАЙЛЕ

import sys

text = sys.stdin.read()

words = text.split()

unique_words = set(words)

print(len(unique_words))


### Чтобы найти количество элементов в двумерном списке просто суммирует элементы по строкам
print(sum(len(row) for row in myset))

